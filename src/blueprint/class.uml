@startuml
left to right direction

annotation Annotation {
    - private
    # protected
    ~ packagePrivate()
    + public(;
}
vendor-[hidden]up-Annotation
package vendor {

    package console {
        interface ConsoleKernelContract {
            + bootstrap()
            + handle(input, output)
            + call(command, parameters)
            + queue(command, parameters)
            + all()
            + output()
            + terminate(input, status)
        }
        class ConsoleKernel {
            # app
            # events
            # artisan
            # commands
            # commandsLoaded
            # bootstrappers
            + handle(input, output)
            + terminate(input, status)
            + command(signature, callback)
            # load(paths)
            + registerCommand(command)
            + call(command, parameters)
            + queue(command, parameters)
            + all()
            + output()
            + bootstrap()
            # getArtisan()
            + setArtisan(artisan)
        }
        class Artisan {
            # laravel
            # lastOutput
            # bootstrappers
            # events
            + run(input, output)
            + starting(callback)
            + bootstrap()
            + call(command, parameters)
            + putput()
            + add(command)
        }
        class RouteListCommand {
            # name
            # router
            # headers
            # compactColumns
            + handle()
            # getRoutes()
            # getRouteInformation(route)
            # sortRoutes(sort, routes)
            # displayRoutes(routes)
            # filterRoute(route)
            # getHeaders()
        }

        class
        ConsoleKernelContract<|--ConsoleKernel
        ConsoleKernel::getArtisan<|--Artisan
        abstract Input {

        }
        class ArgvInput {
            - tokens
            - parsed
            # setTokens(tokens)
            + parse()
            # parseToken(token, parseOptions)
            - parseArgument(token)
        }
        class ConsoleOutput {

        }

        Input<|--ArgvInput
    }
    note right of console
        This directory can be used to create
        files and implement migration like
        the artisan command.
    end note

    package View {
        interface Engine {
            + get(path, data)
        }
        class FileEngine {
            # files
            + construct(Filesystem files)
            + get(path, data)
        }
        class EngineResolver {
            # resolvers
            # resolved
            + register(engine, resolver)
            + resolve(engine)
            + forget(engine)
        }
        class View {
            # factory
            # engine
            # view
            # data
            # path
            + construct(factory, engine, view, path, data)
            + render()
            # rederContents()
            # getContents()
            # gatherData()
            + getData()
            + getPath()
            + getFactory()
            + getEngine()
            + toHtml()
        }
        class FileSystem {
            + exists(path)
            + get(path)
            + delete(path)
            + move(path, target)
            + copy(path, target)
        }
    }

    package composer {
        class AutoloaderInit {
            - {static} loader
            + {static} getLoader()
            + {static} loadClassLoader()
        }
        class Loader {
            - Array classMap
            + getClassMap()
            + addClassMap(classMap)
            + register()
            + unregister()
            + findFile(class)
        }
    }

    package Application {
        class Reflection {
            Array list
            Array Properties
            Array getPropertey()
        }
        class Application {
            + make(class)
            + bind(key, function)
        }
        note right of Reflection
            This Class is able to examine
            class properties and methods,
            their arguments, etc.
        end note
    }

    package HttpMessage {
        class Request {
            + request
            + query
            + attributes
            + cookies
            + files
            + server
            + headers
            # content
            # pathInfo
            # requestUri
            # basePath
            # method
            # format
            + method()
            + fullUrlIs()
            + root()
            + url()
            + fullUrl()
            + fullUrlWithoutQuery()
            + path()
            + routeIs(patterns)
            + fullUrlIs(patterns)
            + get(key)
            + {static} createFromGlobals()
            - {static} createRequestFromFactory(
            Array query, Array request,
            Array attributes, Array cookies,
            Array files, Array server)
            + {static} capture()
        }
        class Response {
            + headers
            # content
            # statusCode
            # statusText
            + {static} statusTexts
            + {static} create()
            + prepare()
            + sendHeaders()
            + sendContent()
            + send()
            + setContent(content)
            + getContent()
            + setStatusCode(code, text)
            + getStatusCode()
        }
        Request-[hidden]down-Response
        note "pass val from super grobal" as N1
        Request::createFromGlobals..N1
        note "create Request instance from request info" as N2
        Request::createRequestFromFactory..N2
    }

    package Http {
        interface HttpKernelContract {
            + bootstrap()
            + handle(request)
            + terminate(request, response)
            + getApplication()
        }
        class HttpKernel {
            # app
            # router
            # bootstrappers
            + handle(requst)
            # sendRequestThroughRouter(request)
            + bootstrap()
            + getApplication()
            # dispatchToRouter()
            + terminate(request, response)
        }
        HttpKernelContract<|--HttpKernel
        package routing {
            class Router {
                # routes
                # currrent
                # currentRequest
                # middleware
                # Array patterns
                + {static} verbs
                + get(uri, action)
                + post(uri, action)
                + put(uri, action)
                + delete(uri, action)
                + patch(uri, action)
                + match(methods, uri, action)
                + view(uri, view, data, status)
                + redirect(uri, destination, status)
                # runRoute(request, route)
            }

            interface Registrar {
                + get(uri, action)
                + post(uri, action)
                + put(uri, action)
                + delete(uri, action)
                + patch(uri, action)
                + match(methods, uri, action)
            }
            class Route {
                + uri
                + methods
                + action
                + controller
                + parameters
                # router
                # RouteAction parseAction()
                # RunController()
                # ControllerDispatcher controllerDispatcher()
                # getController()
                # getControllerMethod()
                # parseControllerCallback()
                # prepareResponse(request, )
                + signatureParameters()
                + run()
            }
            class ControllerDispatcher {
                + dispatch(route, controller, method)
            }

            Route::controllerDispatcher -- ControllerDispatcher
            Router::runRoute -- Route
            Registrar <|-- Router
        }
    }

    package support {
        class Str {
            + static parseCallback()
        }
    }

}



@enduml
